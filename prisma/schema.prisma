generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin_users {
  id                   Int                   @id @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id              Int
  plan_id              Int
  full_name            String                @db.VarChar(45)
  phone                String                @db.VarChar(255)
  register_with_google Int                   @db.TinyInt
  date_registered      DateTime              @default(now()) @db.Timestamp(0)
  start_date           String                @db.VarChar(100)
  end_date             String                @db.VarChar(100)
  plan_type            String                @db.VarChar(45)
  admin_account_limits admin_account_limits?
  plans                plans                 @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "admin_plan")
  users                users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_id_client")
  assets               assets[]
  companies            companies[]
  departments          departments[]
  question_answers     question_answers[]
  roles                roles[]
  sites                sites[]
  subscriptions        subscriptions[]
  tasks                tasks[]

  @@index([plan_id], map: "admin_plan_idx")
  @@index([user_id], map: "user_id_client_idx")
}

model employees {
  id              Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id         Int       @unique(map: "user_id_UNIQUE")
  admin_id        Int       @db.UnsignedInt
  role_id         Int
  company_id      Int
  site_id         Int
  auth_id         Int?      @db.UnsignedInt
  full_name       String    @db.VarChar(45)
  job_title       String?   @db.VarChar(45)
  phone           String    @db.Text
  department_id   Int?
  is_active       Int       @db.TinyInt
  date_registered DateTime  @default(now()) @db.Timestamp(0)
  auth            auth?     @relation(fields: [auth_id], references: [id], onDelete: Cascade, map: "emp_auth")
  companies       companies @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "emp_company")
  roles           roles     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "emp_role")
  sites           sites     @relation(fields: [site_id], references: [id], onDelete: Cascade, map: "emp_site")
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_id_emp")

  @@index([admin_id], map: "emp_admin_idx")
  @@index([company_id], map: "emp_company_idx")
  @@index([site_id], map: "emp_site_idx")
  @@index([auth_id], map: "emp_auth")
  @@index([user_id], map: "user_id_emp_idx")
  @@index([role_id], map: "emp_roles_idx")
}

model assets {
  id                    Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  admin_id              Int
  company_id            Int
  site_id               Int
  asset_name            String      @db.VarChar(45)
  asset_category        String      @db.VarChar(45)
  brand                 String      @db.VarChar(45)
  model                 String      @db.VarChar(100)
  warranty_date         String      @db.VarChar(20)
  last_maintenance_date String?     @db.VarChar(50)
  next_maintenance_date String?     @db.VarChar(50)
  color                 String      @db.VarChar(20)
  serial_number         String      @db.Text
  description           String?     @db.VarChar(100)
  date                  DateTime    @default(now()) @db.Timestamp(0)
  admin_users           admin_users @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "asset_admin")
  companies             companies   @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "asset_company")
  sites                 sites       @relation(fields: [site_id], references: [id], onDelete: Cascade, map: "asset_site")

  @@index([admin_id], map: "asset_admin_idx")
  @@index([company_id], map: "asset_company_idx")
  @@index([site_id], map: "asset_site_idx")
}

model companies {
  id                                  Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  admin_id                            Int
  main_site_id                        Int?
  company_name                        String      @db.VarChar(45)
  sector_type                         String      @db.VarChar(45)
  company_email                       String      @db.VarChar(45)
  company_website                     String?     @db.VarChar(100)
  comapny_logo                        String?     @db.Text
  company_license                     String?     @db.Text
  date                                DateTime    @default(now()) @db.Timestamp(0)
  assets                              assets[]
  admin_users                         admin_users @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "companies_admin")
  sites_companies_main_site_idTosites sites?      @relation("companies_main_site_idTosites", fields: [main_site_id], references: [id], onDelete: Cascade, map: "main_site_id")
  employees                           employees[]
  sites                               sites[]
  tasks                               tasks[]

  @@index([admin_id], map: "companies_admin_idx")
  @@index([main_site_id], map: "main_site_id_idx")
}

model departments {
  id              Int         @id @default(autoincrement()) @db.UnsignedInt
  admin_id        Int
  site_id         Int
  dep_name        String      @db.VarChar(45)
  dep_description String?     @db.VarChar(100)
  date            DateTime    @default(now()) @db.Timestamp(0)
  admin_users     admin_users @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "dep_admin")
  sites           sites       @relation(fields: [site_id], references: [id], onDelete: Cascade, map: "dep_site")

  @@index([admin_id], map: "dep_admin_idx")
  @@index([site_id], map: "dep_site_idx")
}

model permissions {
  id               Int                @id @unique(map: "id_UNIQUE") @default(autoincrement())
  permission_name  String             @db.VarChar(45)
  permission_type  String?            @db.VarChar(45)
  role_permissions role_permissions[]
}

model role_permissions {
  id            Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  role_id       Int
  permission_id Int
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "permission")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "role_id")

  @@index([permission_id], map: "permission_idx")
  @@index([role_id], map: "role_id_idx")
}

model roles {
  id               Int                @id @unique(map: "id_UNIQUE") @default(autoincrement())
  admin_id         Int
  role_name        String             @db.VarChar(45)
  department_id    Int?
  description      String?            @db.VarChar(100)
  date_created     DateTime           @default(now()) @db.Timestamp(0)
  employees        employees[]
  role_permissions role_permissions[]
  admin_users      admin_users        @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "role_admin")

  @@index([admin_id], map: "role_admin_idx")
}

model sites {
  id                                      Int           @id @unique(map: "id_UNIQUE") @default(autoincrement())
  admin_id                                Int
  company_id                              Int
  site_name                               String        @db.VarChar(45)
  time_zone                               String?       @db.VarChar(45)
  full_address                            String        @db.VarChar(245)
  post_code                               String        @db.VarChar(45)
  lat                                     String        @db.VarChar(45)
  long                                    String        @db.VarChar(45)
  site_license                            String?       @db.VarChar(45)
  date                                    DateTime      @default(now()) @db.Timestamp(0)
  assets                                  assets[]
  companies_companies_main_site_idTosites companies[]   @relation("companies_main_site_idTosites")
  departments                             departments[]
  employees                               employees[]
  admin_users                             admin_users   @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "site_admin")
  companies                               companies     @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "site_company")
  tasks                                   tasks[]

  @@index([admin_id], map: "site_admin_idx")
  @@index([company_id], map: "site_company_idx")
}

model auth {
  id              Int         @id @default(autoincrement()) @db.UnsignedInt
  email           String      @db.VarChar(255)
  password        String?     @db.VarChar(255)
  is_admin        Int         @default(1) @db.TinyInt
  provider        String?     @db.VarChar(45)
  provider_id     String?     @db.VarChar(45)
  date_registered DateTime    @default(now()) @db.Timestamp(0)
  employees       employees[]
}

model plans {
  id            Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  title         String          @db.VarChar(45)
  price         String          @db.VarChar(45)
  duration      String          @db.VarChar(100)
  is_yearly     Int             @default(0) @db.TinyInt
  created_date  DateTime        @default(now()) @db.Timestamp(0)
  admin_users   admin_users[]
  plan_features plan_features[]
}

model features {
  id            Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  feature_name  String          @db.VarChar(45)
  type          String?         @db.VarChar(45)
  plan_features plan_features[]
}

model admin_account_limits {
  id                          Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  admin_id                    Int         @unique(map: "admin_id_UNIQUE")
  max_custom_checklists       Int         @default(0)
  max_branches                Int         @default(0)
  max_users                   Int         @default(0)
  free_onsite_inspections     Int         @default(0)
  Arabic_language_support     Int         @default(0) @map("Arabic language support") @db.TinyInt
  Access_to_training_programs Int         @default(0) @map("Access to training programs") @db.TinyInt
  max_Corrective_action       Int         @default(0)
  Daily_monitoring_sheets     Int         @default(0) @map("Daily monitoring sheets") @db.TinyInt
  admin_users                 admin_users @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "admin_id_LMTS")

  @@index([admin_id], map: "admin_id_LMTS_idx")
}

model checklists {
  id              Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  checklist_title String      @db.VarChar(100)
  admin_id        Int
  owner           String      @db.VarChar(45)
  templates       templates[]
}

model plan_features {
  id            Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  plan_id       Int
  feature_id    Int
  feature_value String   @db.VarChar(45)
  plans         plans    @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "details_of_plan")
  features      features @relation(fields: [feature_id], references: [id], onDelete: Cascade, map: "features_of_plan")

  @@index([plan_id], map: "details_of_plan_idx")
  @@index([feature_id], map: "features_of_plan_idx")
}

model questions {
  id               Int                @id @unique(map: "id_UNIQUE") @default(autoincrement())
  question_title   String?            @db.VarChar(200)
  template_id      Int
  question_answers question_answers[]
  question_fields  question_fields[]
  templates        templates          @relation(fields: [template_id], references: [id], onDelete: Cascade, map: "temp_id")

  @@index([template_id], map: "temp_id_idx")
}

model templates {
  id             Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  checklist_id   Int
  template_title String      @db.VarChar(100)
  questions      questions[]
  tasks          tasks[]
  checklists     checklists  @relation(fields: [checklist_id], references: [id], onDelete: Cascade, map: "checklist_id")

  @@index([checklist_id], map: "checklist_id_idx")
}

model question_fields {
  id                     Int                      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  question_id            Int
  type                   String                   @db.VarChar(45)
  question_answers       question_answers[]
  question_field_options question_field_options[]
  questions              questions                @relation(fields: [question_id], references: [id], onDelete: Cascade, map: "question_id")

  @@index([question_id], map: "question_id_idx")
}

model question_answers {
  id              Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  admin_id        Int
  task_id         Int
  question_id     Int
  field_id        Int
  user_id         Int
  value           String          @db.VarChar(100)
  type            String          @db.VarChar(100)
  answered_at     DateTime        @default(now()) @db.Timestamp(0)
  admin_users     admin_users     @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "admin_id_AWS")
  question_fields question_fields @relation(fields: [field_id], references: [id], onDelete: Cascade, map: "field_id_AWS")
  questions       questions       @relation(fields: [question_id], references: [id], onDelete: Cascade, map: "question_id_AWS")
  tasks           tasks           @relation(fields: [task_id], references: [id], onDelete: Cascade, map: "tasks_id_AWS")
  users           users           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_id")

  @@index([field_id], map: "field_id_AWS_idx")
  @@index([question_id], map: "question_id_AWS_idx")
  @@index([question_id], map: "question_id_idx")
  @@index([user_id, admin_id], map: "user_id_AWS_idx")
  @@index([task_id], map: "tasks_id_AWS_idx")
  @@index([admin_id], map: "admin_id_AWS_idx")
}

model super_admins {
  id        Int    @id @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id   Int
  full_name String @db.VarChar(100)
  users     users  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_id_super")

  @@index([user_id], map: "user_id_idx")
}

model users {
  id               Int                @id @unique(map: "id_UNIQUE") @default(autoincrement())
  email            String             @unique(map: "email_UNIQUE") @db.VarChar(100)
  password         String             @db.VarChar(100)
  role             String             @db.VarChar(100)
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  admin_users      admin_users[]
  employees        employees?
  laeq_admins      laeq_admins[]
  question_answers question_answers[]
  super_admins     super_admins[]
  tasks            tasks[]
}

model products {
  id           Int     @id @unique(map: "id_UNIQUE") @default(autoincrement())
  product_name String  @db.VarChar(100)
  price        String  @db.VarChar(45)
  sales        sales[]
}

model sales {
  id            Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  product_id    Int
  product_value String   @db.VarChar(100)
  amount        String   @db.VarChar(100)
  date          DateTime @default(now()) @db.Timestamp(0)
  products      products @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "product_id")

  @@index([product_id], map: "product_id_idx")
}

model subscriptions {
  id             Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  admin_id       Int
  transaction_id String      @db.Text
  plan_id        Int
  amount         Int
  subscripe_at   DateTime    @default(now()) @db.Timestamp(0)
  admin_users    admin_users @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "admin_user_id")

  @@index([admin_id], map: "admin_user_id_idx")
}

model laeq_admins {
  id        Int    @id @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id   Int
  user_name String @db.VarChar(100)
  users     users  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_id_laeq")

  @@index([user_id], map: "user_id_laeq_idx")
}

model tasks {
  id               Int                @id @unique(map: "id_UNIQUE") @default(autoincrement())
  admin_id         Int
  user_id          Int
  template_id      Int
  company_id       Int
  site_id          Int
  status           String             @db.VarChar(45)
  date             DateTime           @default(now()) @db.Timestamp(0)
  question_answers question_answers[]
  admin_users      admin_users        @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "admin_idTasks")
  companies        companies          @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "company_idTasks")
  sites            sites              @relation(fields: [site_id], references: [id], onDelete: Cascade, map: "site_idTasks")
  templates        templates          @relation(fields: [template_id], references: [id], onDelete: Cascade, map: "temp_idTasks")
  users            users              @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_idTasks")

  @@index([admin_id], map: "admin_idTasks_idx")
  @@index([company_id], map: "company_idTasks_idx")
  @@index([site_id], map: "site_idTasks_idx")
  @@index([template_id], map: "temp_idTasks_idx")
  @@index([user_id], map: "user_idTasks_idx")
}

model question_field_options {
  id              Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  field_id        Int
  label           String          @db.VarChar(45)
  value           String          @db.VarChar(45)
  question_fields question_fields @relation(fields: [field_id], references: [id], onDelete: Cascade, map: "field_id_options")

  @@index([field_id], map: "field_id_options_idx")
}
